---
- name: Import variable setting tasks
  ansible.builtin.import_tasks:
    file: set_awx_controller_host.yaml
  tags:
    - launch_workflow

- name: Import variable setting tasks
  ansible.builtin.import_tasks:
    file: set_awx_controller_password.yaml
  tags:
    - launch_workflow

- name: Generate UUID4 for run_uuid
  ansible.builtin.command:
    cmd: uuidgen -r
  changed_when: false
  register: awx_generated_uuid
  tags:
    - launch_workflow

- name: Launch the ITBench workflow
  awx.awx.workflow_launch:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    workflow_template: "{{ workflow_name }}-{{ incident }}"
    extra_vars: "{{ extra_vars_s3 if storage.s3 is defined else extra_vars_local }}"
    wait: false
  vars:
    extra_vars_s3:
      storage:
        s3:
          bucket: "{{ storage.s3.bucket | default('') }}"
          endpoint: "{{ storage.s3.endpoint | default('') }}"
          directory: "{{ awx_agent.version }}/{{ awx_generated_uuid.stdout }}/{{ incident | string }}"
      instana_api_token: "\"{{ awx_credentials.instana.api_token | default('') }}\"" # pragma: allowlist secret
    extra_vars_local:
      storage:
        local:
          directory: "{{ storage.local.directory }}/{{ awx_agent.version }}/{{ awx_generated_uuid.stdout }}/{{ incident | string }}"
      instana_api_token: "\"{{ awx_credentials.instana.api_token | default('') }}\"" # pragma: allowlist secret
  loop: "{{ awx_experiments.scenarios }}"
  loop_control:
    loop_var: incident
  register: awx_launched_workflows
  tags:
    - launch_workflow

- name: Wait for all launched workflows to complete
  ansible.builtin.uri:
    url: "{{ awx_controller_host }}/api/v2/workflow_jobs/{{ item.id }}/"
    method: GET
    user: admin
    password: "{{ awx_controller_password }}"
    force_basic_auth: true
    return_content: true
    validate_certs: false
    timeout: 30
  loop: "{{ awx_launched_workflows.results }}"
  when: item.id is defined
  register: awx_status_workflows
  until: awx_status_workflows.json.status in ['successful', 'failed', 'error', 'canceled']
  retries: 20
  delay: 30
  tags:
    - launch_workflow

- name: Check that all workflows are successful
  ansible.builtin.fail:
    msg: "Workflow {{ item.json.name }} (ID: {{ item.json.id }}) failed with status: {{ item.json.status }}"
  loop: "{{ awx_status_workflows.results }}"
  when:
    - item.json.status is defined
    - item.json.status != 'successful'
  tags:
    - launch_workflow


