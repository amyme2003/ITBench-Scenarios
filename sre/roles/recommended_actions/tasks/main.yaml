---
# Tasks for Recommended Actions role

- name: Create a virtual environment for Recommended Actions script
  ansible.builtin.shell:
    cmd: "python3 -m venv {{ role_path }}/venv"
  args:
    creates: "{{ role_path }}/venv"
  changed_when: false

- name: Install dependencies in virtual environment
  ansible.builtin.shell:
    cmd: "{{ role_path }}/venv/bin/pip install -r {{ role_path }}/files/requirements.txt"
  changed_when: false

- name: Set environment variables for Recommended Actions script
  ansible.builtin.set_fact:
    instana_env:
      BASE_URL: "{{ base_url }}"
      APPLICATION_ID: "{{ application_id | default('') }}"
      TOKEN: "{{ instana_api_token }}"
      AWX_EXECUTION: "true"
      INCIDENT_ID: "{{ incident_id | default('') }}"

- name: Ensure the Recommended Actions script has execute permissions
  ansible.builtin.file:
    path: "{{ role_path }}/files/recommended_actions.py"
    mode: '0755'

- name: Create artifacts directory
  ansible.builtin.file:
    path: "{{ playbook_dir }}/../artifacts"
    state: directory
    mode: '0755'

- name: Run Recommended Actions script with virtual environment
  ansible.builtin.shell:
    cmd: "{{ role_path }}/venv/bin/python {{ role_path }}/files/recommended_actions.py"
  args:
    executable: /bin/bash
  environment: "{{ instana_env }}"
  register: recommended_actions_output
  changed_when: false
  ignore_errors: true
  # Increase timeout for API calls
  timeout: 300

- name: Check if output JSON file exists
  ansible.builtin.stat:
    path: "{{ role_path }}/files/Rec_all.json"
  register: recommended_actions_json_file

- name: Read Recommended Actions JSON output
  ansible.builtin.slurp:
    src: "{{ role_path }}/files/Rec_all.json"
  register: recommended_actions_json_content
  when: recommended_actions_json_file.stat.exists

- name: Set Recommended Actions data as fact
  ansible.builtin.set_fact:
    recommended_actions_data: "{{ recommended_actions_json_content.content | b64decode | from_json if recommended_actions_json_file.stat.exists else {'status': 'error', 'message': 'Recommended Actions output file not found'} }}"

- name: Create fallback Recommended Actions data if script failed
  ansible.builtin.set_fact:
    recommended_actions_data: "{{ {'status': 'error', 'message': 'Recommended Actions script execution failed', 'error': recommended_actions_output.stderr | default('Unknown error')} }}"
  when: recommended_actions_output.rc is defined and recommended_actions_output.rc != 0

- name: Debug Recommended Actions data (pretty print)
  debug:
    msg: "{{ recommended_actions_data | to_nice_json }}"

- name: Set job artifact
  ansible.builtin.set_stats:
    data:
      recommended_actions_data: "{{ recommended_actions_data }}"
    per_host: false


